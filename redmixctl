#!/usr/bin/env python3
# PYTHON_ARGCOMPLETE_OK

# Copyright 2017, 2021 Chris Diamand
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


try:
    import argcomplete  # type: ignore
except ImportError:
    argcomplete = None


import alsaaudio
import argparse
import json
import logging
import logging.handlers
import os
import sys
import time
import typing


import backend
import gui
import models
import version

logger: logging.Logger = logging.getLogger("redmixctl")

MAX_LOG_SIZE = 4 * 1024 * 1024  # 4 MB


def init_logging(logfile):
    global logger
    logger.setLevel(logging.DEBUG)

    stderr_logger = logging.StreamHandler()
    stderr_logger.setLevel(logging.DEBUG)
    logger.addHandler(stderr_logger)

    os.makedirs(os.path.dirname(logfile), exist_ok=True)
    file_logger = logging.handlers.RotatingFileHandler(logfile,
                                                       maxBytes=MAX_LOG_SIZE,
                                                       backupCount=5)
    file_logger.setLevel(logging.DEBUG)
    file_fmt = logging.Formatter("%(asctime)s:%(module)13s: %(message)s")
    file_fmt.converter = time.gmtime
    file_logger.setFormatter(file_fmt)

    logger.addHandler(file_logger)
    logger.debug("--- [starting] ---")


def parse_args():
    ap = argparse.ArgumentParser()

    ap.add_argument("--logfile", "-l",
                    default=os.path.expanduser("~/.local/share/{0}/{0}.log".format(version.NAME)))

    ap.add_argument("--model", "-m", choices=models.all_canonical_names())
    ap.add_argument("--card-index", "-c", type=int, choices=alsaaudio.card_indexes())

    if argcomplete:
        argcomplete.autocomplete(ap)

    return ap.parse_args()


def find_supported_card(args) -> typing.Tuple[int, typing.Dict[str, alsaaudio.Mixer], models.Model]:

    supported_cards: typing.Dict[int, typing.Tuple[typing.Dict[str, alsaaudio.Mixer], models.Model]] = dict()

    for model in models.MODELS:
        try:
            card_index, mixer_elems = backend.find_card_index(model)
            supported_cards[card_index] = (mixer_elems, model)
        except backend.CardNotFoundError:
            continue

    chosen_card_index: int = -1

    if len(supported_cards) == 0:
        logger.error("No supported models found. Supported models are: %s",
                     ", ".join(models.all_canonical_names()))
        sys.exit(1)
    elif len(supported_cards) >= 2:
        if args.card_index:
            if args.card in supported_cards:
                chosen_card_index = args.card
            else:
                logger.error("Card %d requested, but is not a supported card",
                             args.card)
                sys.exit(1)
        elif args.model:
            for card_index in supported_cards:
                if supported_cards[card_index][1].canonical_name == args.model:
                    chosen_card_index = card_index
            if not chosen_card_index:
                logger.error("Model %s requested, but no matching cards were found",
                             args.model)
                sys.exit(1)
        else:
            logger.debug("Multiple supported cards found:")
            for card_index in supported_cards:
                model = supported_cards[card_index][1]
                logger.error("%d: %s [%s]",
                             card_index, model.canonical_name, model.name)
            sys.exit(1)
    elif len(supported_cards) == 1:
        chosen_card_index = list(supported_cards.keys())[0]

    mixer_elems, model = supported_cards[chosen_card_index]
    return chosen_card_index, mixer_elems, model


def main():
    args = parse_args()
    init_logging(args.logfile)

    card_index, mixer_elems, model = find_supported_card(args)

    iface = backend.Interface(card_index, mixer_elems, model)
    app = gui.MixerApp(iface)
    app.MainLoop()


if __name__ == "__main__":
    main()
