#!/usr/bin/env python3
# PYTHON_ARGCOMPLETE_OK

# Copyright 2017 Chris Diamand
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


try:
    import argcomplete
except ImportError:
    argcomplete = None


import argparse
import json
import os
import schema
import sys
import typing

import version

logger = None
MAX_LOG_SIZE = 4 * 1024 * 1024 # 4 MB


def init_logging(logfile):
    import logging
    import logging.handlers
    import time

    global logger
    logger = logging.getLogger(version.NAME)
    logger.setLevel(logging.DEBUG)

    stderr_logger = logging.StreamHandler()
    stderr_logger.setLevel(logging.INFO)
    logger.addHandler(stderr_logger)

    try:
        os.makedirs(os.path.dirname(logfile))
    except:
        pass
    file_logger = logging.handlers.RotatingFileHandler(logfile,
                                                       maxBytes=MAX_LOG_SIZE,
                                                       backupCount=5)
    file_logger.setLevel(logging.DEBUG)
    file_fmt = logging.Formatter("%(asctime)s:%(module)13s: %(message)s")
    file_fmt.converter = time.gmtime
    file_logger.setFormatter(file_fmt)

    logger.addHandler(file_logger)
    logger.debug("--- [starting] ---")


class Model():
    def __init__(self, model: str):
        path: str = os.path.join(os.path.dirname(__file__), "models", model + ".json")
        try:
            with open(path, "rt") as fp:
                data = json.load(fp)
        except (OSError, IOError) as e:
            logger.exception(e)
            sys.exit(1)

        from schema import And, Use

        s = schema.Schema({
            "name": And(str, len),
            "physical_inputs": [str],
            "pcm_inputs": [str],
            "physical_outputs": [str],
            "pcm_outputs": [str],
            "mixes": [str],
            "mixer_inputs": [str],
        })
        validated = s.validate(data)

        self.__dict__.update(validated)

        # Each physical input should have a PCM input
        assert len(self.physical_inputs) == len(self.pcm_inputs)
        # ... and the same for outputs
        assert len(self.physical_outputs) == len(self.pcm_outputs)

        # Different models may have different numbers of mixes. There are
        # usually the same number of mixer inputs as physical inputs, but we
        # shouldn't assume that's the case; we need flexibility here anyway
        # to allow e.g. sacrificing monitoring of a physical input in favour of
        # a signal from the PC, e.g. a click track.


def parse_args():
    ap = argparse.ArgumentParser()

    ap.add_argument("-l", "--logfile",
                    default=os.path.expanduser("~/.local/share/{0}/{0}.log".format(version.NAME)))

    ap.add_argument("--model", "-m", choices=["18i20_gen2"], required=True)

    if argcomplete:
        argcomplete.autocomplete(ap)

    return ap.parse_args()


def main():
    args = parse_args()
    init_logging(args.logfile)

    import backend
    import gui

    model = Model(args.model)
    iface = backend.Interface(model)
    app = gui.MixerApp(iface)
    app.MainLoop()


if __name__ == "__main__":
    main()
